// ***********************************************************************
// Assembly         : KsWare.CodeGenerator
// Author           : SchreinerK
// Created          : 03-27-2018
//
// Last Modified By : SchreinerK
// Last Modified On : 03-27-2018
// ***********************************************************************
// <copyright file="ParameterGeneratorOptions.cs" company="KsWare">
//     Copyright © 2018 KsWare. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System.Collections.Generic;

namespace KsWare.CodeGenerator.Generators {

	/// <summary>
	/// Class ParameterGeneratorOptions.
	/// </summary>
	/// <autogeneratedoc />
	public class ParameterGeneratorOptions {

		private const bool X = true;
		private const bool ˑ = false;
		private static Dictionary<GeneratorMode, bool[]> matrix = new Dictionary<GeneratorMode, bool[]> {
			/*                                             Modifiers                     */
			/*                                             |  Type                       */
			/*                                             |  |  Name                    */
			{GeneratorMode.Code                   , new[] {X, X, X}},
			{GeneratorMode.Compare                , new[] {X, X, ˑ}},
			{GeneratorMode.CompareIgnoreReturnType, new[] {X, X, X}},
			{GeneratorMode.InheriteDoc            , new[] {ˑ, X, ˑ}},
			{GeneratorMode.Signature              , new[] {X, X, ˑ}}, // modifiers "ref", "out", but not "params"
			{GeneratorMode.Call                   , new[] {ˑ, ˑ, X}},
			{GeneratorMode.Declare                , new[] {X, X, X}},
		};

		/// <summary>
		/// Gets or sets a value indicating whether modifiers (<c>ref</c>, <c>out</c>, <c>params</c>) are included.
		/// </summary>
		/// <value><c>true</c> if modifiers are included; otherwise, <c>false</c>.</value>
		/// <autogeneratedoc />
		public bool Modifiers { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether type is included.
		/// </summary>
		/// <value><c>true</c> if type is included; otherwise, <c>false</c>.</value>
		public bool Type { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether name is included.
		/// </summary>
		/// <value><c>true</c> if name is included; otherwise, <c>false</c>.</value>
		public bool Name { get; set; }

		/// <summary>
		/// Creates the options for the specified generator mode.
		/// </summary>
		/// <param name="generatorMode">The generator mode.</param>
		/// <returns>ParameterGeneratorOptions.</returns>
		/// <autogeneratedoc />
		public static ParameterGeneratorOptions Create(GeneratorMode generatorMode) {
			var m = matrix[generatorMode];
			return new ParameterGeneratorOptions {
				Modifiers = m[0],
				Type      = m[1],
				Name      = m[2],
			};
		}
	}

}