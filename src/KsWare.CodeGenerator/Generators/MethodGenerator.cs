// ***********************************************************************
// Assembly         : KsWare.SignatureGenerator
// Author           : SchreinerK
// Created          : 03-26-2018
//
// Last Modified By : SchreinerK
// Last Modified On : 03-27-2018
// ***********************************************************************
// <copyright file="MethodGenerator.cs" company="KsWare">
//     Copyright © 2018 KsWare. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Reflection;
using System.Text;

namespace KsWare.CodeGenerator.Generators {

	/// <summary>
	/// Class MethodGenerator.
	/// </summary>
	/// <seealso cref="BaseGenerator" />
	/// <autogeneratedoc />
	public class MethodGenerator : BaseGenerator {

		/// <summary>
		/// Initializes a new instance of the <see cref="MethodGenerator"/> class.
		/// </summary>
		/// <param name="generator">The generator.</param>
		/// <autogeneratedoc />
		public MethodGenerator(Generator generator) : base(generator) { }

		/// <summary>
		/// Generates code for the specified method information.
		/// </summary>
		/// <param name="methodInfo">The method information.</param>
		/// <returns>System.String.</returns>
		public string Generate(MethodInfo methodInfo) => Generate(methodInfo, MethodGeneratorOptions.Create(GeneratorMode));

		/// <summary>
		/// Generates code for the specified method information.
		/// </summary>
		/// <param name="methodInfo">The method information.</param>
		/// <param name="options">The generator options.</param>
		/// <returns>System.String.</returns>
		public string Generate(MethodInfo methodInfo, MethodGeneratorOptions options) {
			var sb = new StringBuilder();

			if (options.Access    ) sb.Append(Generator.SigAccess  (methodInfo.Attributes));
			if (options.Modifiers ) sb.Append(Generator.SigModifier(methodInfo.Attributes));
			if (options.ReturnType) sb.Append(Generator.Generate        (methodInfo.ReturnType) + " ");
			if (options.Name      ) sb.Append(methodInfo.Name);

			//TODO use options
			sb.Append("(");
			sb.Append(Generator.Generate(methodInfo.GetParameters()));
			sb.Append(")");

			if (sb.ToString() == "protected override void Finalize()")
				return $"~{methodInfo.DeclaringType.Name}()"; // Destructor
			return sb.ToString();
		}

		/// <summary>
		/// Generates code for the specified constructor information.
		/// </summary>
		/// <param name="constructorInfo">The constructor information.</param>
		/// <returns>System.String.</returns>
		public string Generate(ConstructorInfo constructorInfo) {
			var sb = new StringBuilder();

			if (constructorInfo.IsStatic) sb.Append("static ");
			else sb.Append($"{Generator.Generate(constructorInfo.Attributes)}");


			sb.Append(constructorInfo.Name);
			sb.Append("(");
			sb.Append(Generator.Generate(constructorInfo.GetParameters()));
			sb.Append(")");
			return sb.ToString();
		}

		
	}
}
