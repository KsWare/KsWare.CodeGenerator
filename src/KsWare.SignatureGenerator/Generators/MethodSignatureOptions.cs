// ***********************************************************************
// Assembly         : KsWare.SignatureGenerator
// Author           : SchreinerK
// Created          : 03-27-2018
//
// Last Modified By : SchreinerK
// Last Modified On : 03-27-2018
// ***********************************************************************
// <copyright file="MethodSignatureOptions.cs" company="KsWare">
//     Copyright © 2018 KsWare. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Collections.Generic;

namespace KsWare.SignatureGenerator.Generators {

	/// <summary>
	/// Class MethodSignatureOptions.
	/// </summary>
	/// <autogeneratedoc />
	public class MethodSignatureOptions {

		private const bool X = true;
		private const bool o = false;
		private static Dictionary<SignatureMode, bool[]> matrix = new Dictionary<SignatureMode, bool[]> {
			/*                                             Access                               */
			/*                                             |  Modifiers                         */
			/*                                             |  |  ReturnType                     */
			/*                                             |  |  |  Name                        */
			{SignatureMode.Code                   , new[] {X, X, X, X}},
			{SignatureMode.Compare                , new[] {X, X, X, X}},
			{SignatureMode.CompareIgnoreReturnType, new[] {X, X, o, X}},
			{SignatureMode.InheriteDoc            , new[] {o, o, o, X}},
			{SignatureMode.Signature              , new[] {o, o, o, X}},
			{SignatureMode.Call                   , new[] {o, o, o, X}},
			{SignatureMode.Declare                , new[] {X, X, X, X}},
		};

		/// <summary>
		/// Gets or sets a value indicating whether access is included.
		/// </summary>
		/// <value><c>true</c> if access is included; otherwise, <c>false</c>.</value>
		public bool Access { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether this modifiers are included.
		/// </summary>
		/// <value><c>true</c> if modifiers are included; otherwise, <c>false</c>.</value>
		/// <autogeneratedoc />
		public bool Modifiers { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether return type is included.
		/// </summary>
		/// <value><c>true</c> if return type is included; otherwise, <c>false</c>.</value>
		public bool ReturnType { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether name is included.
		/// </summary>
		/// <value><c>true</c> if name is included; otherwise, <c>false</c>.</value>
		public bool Name { get; set; }

		/// <summary>
		/// Gets or sets the parameter options.
		/// </summary>
		/// <value>The parameter options.</value>
		/// <autogeneratedoc />
		public ParameterSignatureOptions Parameter { get; set; }

		/// <summary>
		/// Creates the options for the specified signature mode.
		/// </summary>
		/// <param name="signatureMode">The signature mode.</param>
		/// <returns>MethodSignatureOptions.</returns>
		/// <autogeneratedoc />
		public static MethodSignatureOptions Create(SignatureMode signatureMode) {
			var m = matrix[signatureMode];
			return new MethodSignatureOptions {
				Access     = m[0],
				Modifiers  = m[1],
				ReturnType = m[2],
				Name       = m[3],
				Parameter  = ParameterSignatureOptions.Create(signatureMode)
			};
		}
	}

}